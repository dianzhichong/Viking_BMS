/*
* Copyright (C) 2014 Viking Motorsport Team (VMS)
*
* This file is part of VMS Battery Management System.
*
* VMS Battery Management System is free software; you can redistribute 
* it and/or modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2,
* or (at your option) any later version.
*
* VMS Battery Management System is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even
* the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* See the GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with paparazzi; see the file COPYING. If not, write to
* the Free Software Foundation, 59 Temple Place - Suite 330,
* Boston, MA 02111-1307, USA.
*/

/**
* @file downlink/downlink.c
*
* Telemetry for BMS
*/
#include "downlink.h"
#include "SDFileSystem.h"
#include <ctype.h>
#include <string>

#include "main.h"

AnalogOut acc_out(p18);
AnalogIn throttle1(p16); //s1
AnalogIn throttle2(p17); //s2

#define GEAR_RATIO 3.0

//AnalogIn throttle0(p15);
//AnalogIn throttle1(p16); //s1
//AnalogIn throttle2(p17); //s2
//AnalogIn throttle3(p19);
//AnalogIn throttle4(p20);

AnalogIn charge_current(p15);

Serial debuglink(USBTX, USBRX);//debuglink(p13, p14);//debuglink(USBTX, USBRX); // tx, rx
Serial downlink(p28, p27); 
SDFileSystem sd(p5, p6, p7, p8, "sd");
FILE *fp;

enum DownlinkState downlink_status;
static char rx_buf[DOWNLINK_BUFFER_SIZE];
static uint8_t d_idx;
bool bLineFeed;
bool bHeader;
bool bEcho;
bool bHeaders;

int file_counter;

time_t f_seconds;
char logname[32];

string toHexString(uint8_t f)
{
  ostringstream oss;
  oss << std::uppercase << std::hex << (int)f;
  return oss.str();
}

string toHexString(uint16_t f)
{
  ostringstream oss;
  oss << std::uppercase << std::hex << (int)(f >> 8) << " " << (int)(f & 0xff);
  return oss.str();
}

/**
 * Bound number (int16_t)
 */
int16_t boundNumberShort(int16_t num, int16_t lower, int16_t upper){
	if (num > upper) {
		num = upper;
		return num;
	}
	if (num < lower) {
		num = lower;
		return num;
	}
	else {
		return num;
	}
}

/**
 * Bound number (uint16_t)
 */
uint16_t boundNumberUnsigShort(uint16_t num, uint16_t lower, uint16_t upper){
	if (num > upper) {
		num = upper;
		return num;
	}
	if (num < lower) {
		num = lower;
		return num;
	}
	else {
		return num;
	}
}

/**
 * Bound number (uint8_t)
 */
uint8_t boundNumberUnsigByte(uint8_t num, uint8_t lower, uint8_t upper){
	if (num > upper) {
		num = upper;
		return num;
	}
	if (num < lower) {
		num = lower;
		return num;
	}
	else {
		return num;
	}
}

/**
 * Downlink init
 */
void downlink_init(void){
    // Serial init
    downlink.baud(DOWNLINK_BAUDRATE);
    downlink.printf("I am alive!\n");
    downlink_status = DataMode;
    memset(rx_buf, 0, DOWNLINK_BUFFER_SIZE);
    d_idx = 0;
    bLineFeed = true;
    bHeader = false;
    bEcho = true;
    bHeaders = false;
    
    // Debug link init
    debuglink.baud(DEBUGLINK_BAUDRATE);
    debuglink.printf("I am alive!\r\n");    
    
    // SD card init
    f_seconds = time(NULL);
    strftime(logname, 32, "/sd/%F_%H-%M-%S.txt", localtime(&f_seconds));

    fp = fopen(logname, "w");
    if(fp != NULL) {
        debuglink.printf("SD card counter opened!\n");
        //fprintf(fp, "Timer, Throttle1, Throttle2, Out\n");
        //rewind(fp);
        fprintf(fp, "Timer, Uptime, PhaseTemp1, PhaseTemp2, PhaseTemp3, GateTemp, BoardTemp, RtdTemp1, RtdTemp2, RtdTemp3, RtdTemp4, RtdTemp5,"
        		"MotorTemp, TorqueShud, TorqueCmd, TorqueFb, AnIn1, AnIn2, AnIn3, AnIn4, DigIn1, DigIn2, DigIn3, DigIn4, DigIn5, DigIn6, "
        		"MotorAngle, MotorSpeed, InvFreq, ResAng, PhasCur1, PhasCur2, PhasCur3, DcCur, DcVolt, OutputVolt, PabVolt, PbcVolt,"
        		"FluxCmd, FluxFb, IdFb, IqFb, IdCmd, IqCmd, Ref15, Ref25, Ref50, Sys12V, VSMstate, InvState, RelayState, InvMode, InvCmd, InvEn,"
        		"Direction, Fault1, Fault2, Fault3, Fault4, Fault5, Fault6, Fault7, Fault8, ModIdx, FluxRegOut, ThrottleIn1, ThrottleIn2, ThrottleOut"
        		"\n");
        fclose(fp);
    }

    LED_ON(led_telemetry);
}

/**
 * Telemetry periodic
 */
 void downlink_periodic(void){
    LED_TOGGLE(led_telemetry);
     
    // Debug
    debuglink.printf("Uptime: %i sec.\r\n", bms.up_time);

    /*
    debuglink.printf("throttle OK: %i\r\n", throttle_ok);
    debuglink.printf("epsilon: %f\r\n", epsilon);
    debuglink.printf("init: %i\r\n", init);
    debuglink.printf("counter: %i\r\n", counter);
    debuglink.printf("fsig1: %f\r\n", fsig1);
    debuglink.printf("fsig2: %f\r\n", fsig2);
    debuglink.printf("delta: %f\r\n", delta);

    debuglink.printf("brake_en: %i\r\n", brake_en.read());
    debuglink.printf("ksi: %i\r\n", ksi.read());
*/

    /*
    if ((bms.up_time%=2)== 0) {
    	acc_out.write(0);
    }
    else {
    	acc_out.write(1);
    }
    */
    //debuglink.printf("Aout: %f\r\n", acc_out.read());
    //float current = charge_current;
    //debuglink.printf("Current sensor: %f [V]\r\n",current);
    //debuglink.printf("BMS faults: %i \r\n",bms.faults[0]);
    //debuglink.printf("BMS board temo: %i \r\n",bms.board_temp);

    
    // Print status

    for (int i=0;i<NUM_RLECS;i++){
        if (mlec.rlecsX[i].status == Active) {
            debuglink.printf(">>> RLEC_ %i\r\n", i);
            debuglink_print_rlec(&(mlec.rlecsX[i]));        
            debuglink.printf("\r\n");    
        }
    }
    debuglink.printf("\r\n");  

    // Print BMS values
    debuglink.printf("DC voltage: %i [V]\r\n", bms.dc_voltage/10);
    debuglink.printf("DC current: %i [A]\r\n", bms.dc_current/10);
    debuglink.printf("battery voltage: %i [V]\r\n", bms.sys_12v/100);
    debuglink.printf("board_temp: %i [C]\r\n", bms.board_temp/10);
    debuglink.printf("vsm_state: %i \r\n", bms.vsm_state);
    debuglink.printf("inv_state: %i \r\n", bms.inv_state);

    //debuglink.printf("COUNTER: %i\r\n",file_counter);
    //debuglink.printf("In1: %f\r\n", throttle1.read());
    //debuglink.printf("In2: %f\r\n", throttle2.read());
    //debuglink.printf("Out: %f\r\n", acc_out.read());

    /*
    debuglink.printf("brake_en: %i\r\n", brake_en.read());
    debuglink.printf("LLIM: %i\r\n", llim.read());
    debuglink.printf("fw_enable: %i\r\n", fw_enable.read());
    */

    //time_t seconds = time(NULL);
    //debuglink.printf("Time as seconds since January 1, 1970 = %d\r\n", seconds);
    //debuglink.printf("Time as a basic string = %s\r", ctime(&seconds));

    /*
    char buffer[32];
    strftime(buffer, 32, "%F_%H-%M-%S", localtime(&seconds));
    printf("Time as a custom formatted string = %s\r\n", buffer);
*/
    debuglink.printf("\r\n");
    debuglink.printf("\r\n");
    debuglink.printf("\r\n");
          
    // Send actual serial data to Torque
    //downlink.printf("Uptime: %i sec.\r\n", bms.up_time);
    //debuglink.printf("Filename %s\r\n", logname);
    // File log
    /*
    fp = fopen(logname, "a");
    if(fp != NULL) {
        fprintf(fp, "Uptime: %i sec.\n", bms.up_time);
        debuglink.printf("Written\n");
        fclose(fp);
    }
    */
}

/**
 * Datalink event
 */
 void downlink_event(void){
     static char c;
     
     // USB serial
     if(debuglink.readable()) {
       c = debuglink.getc();
       if (c == 'a') mlec.rlecsX[15].faults = 0x1;
       if (c == 'b') mlec.rlecsX[15].faults = 0x2;
       if (c == 'c') mlec.rlecsX[15].faults = 0x4;
       if (c == 'd') mlec.rlecsX[15].faults = 0x8;
       if (c == 'e') mlec.rlecsX[15].faults = 0x10;
       if (c == 'f') mlec.rlecsX[15].faults = 0x20;
       if (c == 'g') mlec.rlecsX[15].faults = 0x40;
       if (c == 'h') mlec.rlecsX[15].faults = 0x80;
       if (c == 'i') mlec.rlecsX[15].faults = 0x0;
       debuglink.printf(">%c\n", c);
     }
     
     // Torque
     if(downlink.readable()) {
       downlink_parse(downlink.getc());
     }
}

void downlink_parse(char c) {
    // parse until we get 0xD <CR>
    //debuglink.printf(">: %c\n", c);
    if ((c == 0xD) || (d_idx > DOWNLINK_BUFFER_SIZE)) {
        rx_buf[d_idx] = 0; //null terminate the string
        d_idx = 0;
        downlink_process_cmd();
    }
    else {
        if ((c != 0xA) && (c != 0x20)) { // no LF, no Space
            rx_buf[d_idx++] = (char)tolower(c);
        }
    }
}

void downlink_process_cmd(void) {
    string retString = string();
    string lineEnding;
    if (bLineFeed) lineEnding = string("\r\n>");
    else lineEnding = string("\r>");
    if (!strncmp(rx_buf, "at", 2)) {
        if (!strcmp(rx_buf, "ati")) { // print the version ID
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT I\r\r\n");
            retString+="\rELM327 v1.3a";
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "at@1")) { // display the device description
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT @1\r\r\n");
            retString+="\reVCU 1.0";
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "atdpn")) { // Describe the Protocol by Number
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT DPN\r\r\n");
            retString+="\r6";
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "atdp")) { // Describe the current Protoco
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT DP\r\r\n");
            retString+="\rISO 15765-4 CAN (11 bit ID, 500 kbaud)";
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "atrv")) { // Read the input Voltage
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT RV\r\r\n");
            // GLV value (12V battery voltage - analog input)
            retString+="\r 12.3V";
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "atl0")) { //turn linefeeds off
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT L0\r\r\n");
            bLineFeed = false;
            retString+=("\rOK");
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "atl1")) { //turn linefeeds on
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT L1\r\r\n");
            bLineFeed = true;
            retString+=("\rOK");
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "atz")) { //reset hardware
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT Z\r\r\n");
            retString+="\rELM327 v1.3a";
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "ath0")) { // headers off
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT H0\r\r\n");
            bHeaders = false;
            retString+=("\rOK");
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "ath1")) { //turn headers on
            debuglink.printf("Command received: %s\n", rx_buf);
            if (bEcho) retString+=("AT H1\r\r\n");
            bHeaders = true;
            retString+=("\rOK");
            retString+=lineEnding;
        }
        else {
            debuglink.printf("Unknwon AT command: %s\n", rx_buf);
            retString+="\rOK";
            retString+=lineEnding;
        }
    }
    else { // ODB request
        if (!strcmp(rx_buf, "0100")) { // available sensors
            debuglink.printf("Command received: %s\n", rx_buf);
            retString+=  "4100 08 1A 80 02";
            //retString+="4100 08 3A 00 00";
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "0105")) { // Engine coolant temperature (Motor temp)
            retString+="41 05 ";// 70C = 158F (1 	Engine coolant temperature 	-40 	215 	°C 	A-40)
            uint8_t tmp = (uint8_t)boundNumberShort(bms.motor_temp/10+40, 0, 255);
            retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "010c")) { // Engine RPM (the received value is divided by 4)
        	// 0C 	2 	Engine RPM 	0 	16,383.75 	rpm 	((A*256)+B)/4
        	retString+="41 0C ";//retString+="41 0C 68 28";// 6666RPM
        	uint16_t tmp = boundNumberUnsigShort(bms.motor_speed*4, 0, 65535);
        	retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "010d")) { // Vehicle speed (kmh)
        	//0D 	1 	Vehicle speed 	0 	255 	km/h 	A
            //debuglink.printf("Command received: %s\n", rx_buf);
        	retString+="41 0D ";//retString+="41 0D 88";//85 mph
        	uint16_t speed = (uint16_t)((float)bms.motor_speed*GEAR_RATIO*0.06);
        	uint8_t tmp = (uint8_t)boundNumberShort(speed, 0, 255);
        	retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "010f")) { // Intake air temperature (Controller temperature)
            //debuglink.printf("Command received: %s\n", rx_buf);
        	//0F 	1 	Intake air temperature 	-40 	215 	°C 	A-40
            retString+="41 0F ";//retString+="41 0F 46";// 70C = 158F
            uint8_t tmp = (uint8_t)boundNumberShort(bms.board_temp/10+40, 0, 255);
            retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "0111")) { // Throttle position (throttle encoder)
            //debuglink.printf("Command received: %s\n", rx_buf);
        	//11 	1 	Throttle position 	0 	100 	 % 	A*100/255
        	float throttle = acc_out.read()*255;
        	uint8_t tmp = (uint8_t)throttle;
			retString+="41 11 ";//retString+="41 11 6B";// 42 %
        	retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "011c")) { // OBD standards this vehicle conforms to
            //debuglink.printf("Command received: %s\n", rx_buf);
            retString+="41 1C 02";// 2 - OBD as defined by the EPA
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "011f")) { // Run time since engine start (uptime)
            //debuglink.printf("Command received: %s\n", rx_buf);
        	//1F 	2 	Run time since engine start 	0 	65,535 	seconds 	(A*256)+B
        	retString+="41 1F ";//retString+="41 1F 00 0D";// 13s
        	uint16_t tmp = boundNumberUnsigShort(bms.up_time, 0, 65535);
        	retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "01c3")) { // HV Voltage
        	//45 300 	V 	A+40
        	retString+="41 C3 ";//retString+="41 C3 91";// 290V
        	uint8_t tmp = (uint8_t)boundNumberShort(bms.dc_voltage/10-40, 0, 255);
        	retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else if (!strcmp(rx_buf, "01c4")) { // HV Current
        	// 0-6 553.5 A 	((A*256)+B)/10
        	retString+="41 C4 ";//retString+="41 C4 28";// 30A
        	uint16_t tmp = boundNumberUnsigShort(bms.dc_current, 0, 65535);
        	retString+=toHexString(tmp);
            retString+=lineEnding;
        }
        else {
            //unknown command
            debuglink.printf("Unknown OBD command: %s\n",rx_buf);
        }        
    }
    downlink.printf(retString.c_str()); 
    //debuglink.printf("Command responded: %s\n",retString.c_str());
}

void debuglink_print_rlec(struct RLECModule* rlec) {
    //debuglink.printf("Status: %i\r\n", rlec->status);
    debuglink.printf("max_cell_volt: %f [V]\r\n", (float)(rlec->max_cell_volt*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("min_cell_volt: %f [V]\r\n", (float)(rlec->min_cell_volt*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("rlec_temp: %i [C]\r\n", rlec->rlec_temp);
    debuglink.printf("balance_resistors: %X\r\n", rlec->balance_resistors);
    debuglink.printf("faults: %X\r\n", rlec->faults);
    debuglink.printf("rlec_volt: %f [V]\r\n", (float)(rlec->rlec_volt*RLEC_CAN_MODULE_MULT));
    debuglink.printf("max_cell_temp: %i [C]\r\n", rlec->max_cell_temp);
    debuglink.printf("min_cell_temp: %i [C]\r\n", rlec->min_cell_temp);
    //debuglink.printf("sw_id: %X\r\n", rlec->sw_id);
    
    /*
    debuglink.printf("cell_01: %f [V]\r\n", (float)(rlec->cell_voltage[0]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_02: %f [V]\r\n", (float)(rlec->cell_voltage[1]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_03: %f [V]\r\n", (float)(rlec->cell_voltage[2]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_04: %f [V]\r\n", (float)(rlec->cell_voltage[3]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_05: %f [V]\r\n", (float)(rlec->cell_voltage[4]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_06: %f [V]\r\n", (float)(rlec->cell_voltage[5]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_07: %f [V]\r\n", (float)(rlec->cell_voltage[6]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_08: %f [V]\r\n", (float)(rlec->cell_voltage[7]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_09: %f [V]\r\n", (float)(rlec->cell_voltage[8]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_10: %f [V]\r\n", (float)(rlec->cell_voltage[9]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_11: %f [V]\r\n", (float)(rlec->cell_voltage[10]*RLEC_CAN_VOLTAGE_MULT));
    debuglink.printf("cell_12: %f [V]\r\n", (float)(rlec->cell_voltage[11]*RLEC_CAN_VOLTAGE_MULT));
    */
}


